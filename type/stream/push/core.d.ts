import { EmitForm, Emitter, EmitItem, Cancel } from "./type";
import { Selector, Predicate, Action, Aggregate } from "../../type";
export declare function map<T, K>(emit: EmitForm<K>, f: Selector<T, K>): (x: T) => void;
export declare function filter<T>(emit: EmitForm<T>, f: Predicate<T>): (x: T) => void;
export declare function remove<T>(emit: EmitForm<T>, f: Predicate<T>): (x: T) => void;
export declare function take<T>(emit: EmitForm<T>, n: number): (x: T) => void;
export declare function takeWhile<T>(emit: EmitForm<T>, f: Predicate<T>): (x: T) => void;
export declare function skip<T>(emit: EmitForm<T>, n: number): (x: T) => void;
export declare function skipWhile<T>(emit: EmitForm<T>, f: Predicate<T>): (x: T) => void;
export declare function partition<T>(emitter: Emitter<T>, emit: EmitForm<T[]>, expose: Action<Cancel>, n: number): void;
export declare function partitionBy<T>(emitter: Emitter<T>, emit: EmitForm<T[]>, expose: Action<Cancel>, f: Selector<T, any>): void;
export declare function flatten<T>(emit: EmitForm<T>): (xx: T[]) => void;
export * from "./core/group-by";
export declare function incubate<T>(emitter: Emitter<Promise<T>>, emit: EmitForm<T>, expose: Action<Cancel>): void;
export declare function concat<T>(emitter1: Emitter<T>, emitter2: Emitter<T>, emit: EmitForm<T>, expose: Action<Cancel>): void;
export * from "./core/zip";
export declare function race<T>(ee: Emitter<T>[], emit: EmitForm<T>, expose: Action<Cancel>): void;
export declare function reduce<T, K>(resolve: Action<K>, reject: Action<any>, f: Aggregate<T, K>, v: K): (...[t, x]: EmitItem<T>) => void;
export declare function count(resolve: Action<number>, reject: Action<any>): (...[t, x]: EmitItem<any>) => void;
export declare function include<T>(resolve: Action<boolean>, reject: Action<any>, v: T): (...[t, x]: EmitItem<T>) => void;
export declare function every<T>(resolve: Action<boolean>, reject: Action<any>, f: Predicate<T>): (...[t, x]: EmitItem<T>) => void;
export declare function some<T>(resolve: Action<boolean>, reject: Action<any>, f: Predicate<T>): (...[t, x]: EmitItem<T>) => void;
export declare function first<T>(resolve: Action<T | void>, reject: Action<any>): (...[t, x]: EmitItem<T>) => void;
export declare function last<T>(resolve: Action<T | void>, reject: Action<any>): (...[t, x]: EmitItem<T>) => void;

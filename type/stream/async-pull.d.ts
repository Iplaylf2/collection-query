import { Func, Action, AsyncAction, Selector, AsyncSelector, Predicate, AsyncPredicate, Aggregate, AsyncAggregate } from "../type";
export declare function forEach<T>(s: Func<AsyncIterableIterator<T>>, f: Action<T> | AsyncAction<T>): Promise<void>;
export declare function map<T, K>(f: Selector<T, K> | AsyncSelector<T, K>): (s: Func<AsyncIterableIterator<T>>) => Func<AsyncIterableIterator<K>>;
export declare function filter<T>(f: Predicate<T> | AsyncPredicate<T>): (s: Func<AsyncIterableIterator<T>>) => Func<AsyncIterableIterator<T>>;
export declare function remove<T>(f: Predicate<T> | AsyncPredicate<T>): (s: Func<AsyncIterableIterator<T>>) => Func<AsyncIterableIterator<T>>;
export declare function take<T>(n: number): (s: Func<AsyncIterableIterator<T>>) => Func<AsyncIterableIterator<T>>;
export declare function takeWhile<T>(f: Predicate<T> | AsyncPredicate<T>): (s: Func<AsyncIterableIterator<T>>) => Func<AsyncIterableIterator<T>>;
export declare function skip<T>(n: number): (s: Func<AsyncIterableIterator<T>>) => Func<AsyncIterableIterator<T>>;
export declare function skipWhile<T>(f: Predicate<T> | AsyncPredicate<T>): (s: Func<AsyncIterableIterator<T>>) => Func<AsyncIterableIterator<T>>;
export declare function concat<T>(s1: Func<AsyncIterableIterator<T>>, s2: Func<AsyncIterableIterator<T>>): Func<AsyncIterableIterator<T>>;
export declare function concatAll<T>([s, ...ss]: Func<AsyncIterableIterator<T>>[]): Func<AsyncIterableIterator<T>>;
export declare function zip<T>(ss: Func<AsyncIterableIterator<T>>[]): Func<AsyncIterableIterator<T[]>>;
export declare function race<T>(ss: Func<AsyncIterableIterator<T>>[]): Func<AsyncIterableIterator<T>>;
export declare function reduce<T, K>(s: Func<AsyncIterableIterator<T>>, f: Aggregate<T, K> | AsyncAggregate<T, K>, v: K): Promise<K>;
export declare function count(s: Func<AsyncIterableIterator<any>>): Promise<number>;
export declare function include<T>(s: Func<AsyncIterableIterator<T>>, x: T): Promise<boolean>;
export declare function every<T>(s: Func<AsyncIterableIterator<T>>, f: Predicate<T> | AsyncPredicate<T>): Promise<boolean>;
export declare function some<T>(s: Func<AsyncIterableIterator<T>>, f: Predicate<T> | AsyncPredicate<T>): Promise<boolean>;
export declare function first<T>(s: Func<AsyncIterableIterator<T>>): Promise<any>;
export declare function last<T>(s: Func<AsyncIterableIterator<T>>): Promise<T | undefined>;

import { PushStream } from "./type";
import { Action, Selector, Predicate, Aggregate } from "../type";
import { Executor } from "./push/type";
export declare const create: <T>(executor: Executor<T>) => PushStream<T>;
export declare const createFrom: <T>(i: Iterable<T>) => PushStream<T>;
export declare function forEach<T>(s: PushStream<T>, f: Action<T>): void;
export declare function map<T, K>(f: Selector<T, K>): (s: PushStream<T>) => PushStream<K>;
export declare function filter<T>(f: Predicate<T>): (s: PushStream<T>) => PushStream<T>;
export declare function remove<T>(f: Predicate<T>): (s: PushStream<T>) => PushStream<T>;
export declare function take<T>(n: number): (s: PushStream<T>) => PushStream<T>;
export declare function takeWhile<T>(f: Predicate<T>): (s: PushStream<T>) => PushStream<T>;
export declare function skip<T>(n: number): (s: PushStream<T>) => PushStream<T>;
export declare function skipWhile<T>(f: Predicate<T>): (s: PushStream<T>) => PushStream<T>;
export declare function partition<T>(n: number): (s: PushStream<T>) => PushStream<T[]>;
export declare function partitionBy<T>(f: Selector<T, any>): (s: PushStream<T>) => PushStream<T[]>;
export declare const flatten: <T>(s: PushStream<T[]>) => PushStream<T>;
export declare function _flatten<T>(): (s: PushStream<T[]>) => PushStream<T>;
export declare function groupBy<T, K>(f: Selector<T, K>): (s: PushStream<T>) => PushStream<[K, PushStream<T>]>;
export declare function incubate<T>(s: PushStream<Promise<T>>): PushStream<T>;
export declare function _incubate<T>(): (s: PushStream<Promise<T>>) => PushStream<T>;
export declare function concat<T>(s1: PushStream<T>, s2: PushStream<T>): PushStream<T>;
export declare function concatAll<T>([s, ...ss]: PushStream<T>[]): PushStream<T>;
export declare function zip<T>(ss: PushStream<T>[]): PushStream<T[]>;
export declare function race<T>(ss: PushStream<T>[]): PushStream<T>;
export declare function reduce<T, K>(s: PushStream<T>, f: Aggregate<T, K>, v: K): Promise<K>;
export declare function count(s: PushStream<any>): Promise<number>;
export declare function include<T>(s: PushStream<T>, v: T): Promise<boolean>;
export declare function every<T>(s: PushStream<T>, f: Predicate<T>): Promise<boolean>;
export declare function some<T>(s: PushStream<T>, f: Predicate<T>): Promise<boolean>;
export declare function first<T>(s: PushStream<T>): Promise<void | T>;
export declare function last<T>(s: PushStream<T>): Promise<void | T>;

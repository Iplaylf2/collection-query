import { Func, Action, Selector, Predicate, Aggregate } from "../type";
export declare function forEach<T>(s: Func<IterableIterator<T>>, f: Action<T>): void;
export declare function map<T, K>(f: Selector<T, K>): (s: Func<IterableIterator<T>>) => Func<IterableIterator<K>>;
export declare function filter<T>(f: Predicate<T>): (s: Func<IterableIterator<T>>) => Func<IterableIterator<T>>;
export declare function remove<T>(f: Predicate<T>): (s: Func<IterableIterator<T>>) => Func<IterableIterator<T>>;
export declare function take<T>(n: number): (s: Func<IterableIterator<T>>) => Func<IterableIterator<T>>;
export declare function takeWhile<T>(f: Predicate<T>): (s: Func<IterableIterator<T>>) => Func<IterableIterator<T>>;
export declare function skip<T>(n: number): Generator<never, (s: Func<IterableIterator<T>>) => Func<IterableIterator<T>>, unknown>;
export declare function skipWhile<T>(f: Predicate<T>): (s: Func<IterableIterator<T>>) => Func<IterableIterator<T>>;
export declare function concat<T>(s1: Func<IterableIterator<T>>, s2: Func<IterableIterator<T>>): Func<IterableIterator<T>>;
export declare function concatAll<T>([s, ...ss]: Func<IterableIterator<T>>[]): Func<IterableIterator<T>>;
export declare function zip<T>(ss: Func<IterableIterator<T>>[]): Func<IterableIterator<T[]>>;
export declare function reduce<T, K>(s: Func<IterableIterator<T>>, f: Aggregate<T, K>, v: K): K;
export declare function count(s: Func<IterableIterator<any>>): number;
export declare function include<T>(s: Func<IterableIterator<T>>, x: T): boolean;
export declare function every<T>(s: Func<IterableIterator<T>>, f: Predicate<T>): boolean;
export declare function some<T>(s: Func<IterableIterator<T>>, f: Predicate<T>): boolean;
export declare function first<T>(s: Func<IterableIterator<T>>): T;
export declare function last<T>(s: Func<IterableIterator<T>>): T | undefined;
